var d=Object.defineProperty;var s=(e,t)=>d(e,"name",{value:t,configurable:!0});import{j as a}from"./jsx-runtime-1a1b98e7.js";import{V as u}from"./ValidationHint-0af7e213.js";import{r as p}from"./index-29d3bc65.js";import{E as c,G as m}from"./index-58d5119c.js";import{I as h}from"./IconButton-ae2e48c7.js";import{T as f}from"./TextInput-8156503d.js";import{d as y}from"./styled-components.browser.esm-852d80e5.js";const i=s(e=>{const[t,n]=p.useState(!1),r=s(()=>{n(l=>!l)},"toggleShowPassword");return a.jsx(f,{type:t?"text":"password",spellCheck:!1,buttonAction:r,button:a.jsx(h,{svg:t?c:m,"aria-label":t?"Hide password":"Show password"}),...e})},"PasswordInput"),g=i;try{i.displayName="PasswordInput",i.__docgenInfo={description:"",displayName:"PasswordInput",props:{label:{defaultValue:null,description:"Style guide: Text fields should always have a label",name:"label",required:!0,type:{name:"string"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},helpText:{defaultValue:null,description:"Style guide: Input constraints can be displayed here e.g. for Expiry Date: MM/YY",name:"helpText",required:!1,type:{name:"string"}},state:{defaultValue:null,description:`The state of the input - defines border style, and whether to show
error messages`,name:"state",required:!0,type:{name:"enum",value:[{value:'"default"'},{value:'"error"'},{value:'"success"'},{value:'"waiting"'}]}},message:{defaultValue:null,description:`When controlled={true}, the message that will display on error
Otherwise, the state must be manually set to InputState.ERROR`,name:"message",required:!1,type:{name:"string"}},required:{defaultValue:null,description:`Whether to display the asterisk indicating a required field
Note: This is purely a VISUAL indicator, and does not affect validation`,name:"required",required:!1,type:{name:"boolean"}},controlled:{defaultValue:null,description:`Whether the input's validation (errors and state) are controlled by
react-hook-form (requiring use of FormProvider from
@indy /ui/Form)`,name:"controlled",required:!1,type:{name:"boolean"}}}}}catch{}const w="password-validation-hints",x="password-validation-hint",I=y.div.withConfig({componentId:"sc-1or6ca6-0"})(["display:grid;width:100%;align-items:center;justify-content:flex-start;gap:","px ","px;grid-template-columns:repeat(2,auto);margin-top:","px;margin-bottom:","px;"],({theme:e})=>e.spacing.x0_5,({theme:e})=>e.spacing.x4,({theme:e})=>e.spacing.x1_5*-1,({theme:e})=>e.spacing.x2),o=s(({validationHints:e,...t})=>a.jsxs(a.Fragment,{children:[a.jsx(g,{...t}),e&&a.jsx(I,{"data-testid":w,children:Object.entries(e).map(([n,r])=>a.jsx(u,{...r,"data-testid":`${x}-${r.hint.toLowerCase().replace(/\s/g,"-")}`},n))})]}),"PasswordInputWithValidationHints");try{o.displayName="PasswordInputWithValidationHints",o.__docgenInfo={description:"",displayName:"PasswordInputWithValidationHints",props:{validationHints:{defaultValue:null,description:"",name:"validationHints",required:!1,type:{name:"Record<string, ValidationHintProps>"}},label:{defaultValue:null,description:"Style guide: Text fields should always have a label",name:"label",required:!0,type:{name:"string"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},helpText:{defaultValue:null,description:"Style guide: Input constraints can be displayed here e.g. for Expiry Date: MM/YY",name:"helpText",required:!1,type:{name:"string"}},state:{defaultValue:null,description:`The state of the input - defines border style, and whether to show
error messages`,name:"state",required:!0,type:{name:"enum",value:[{value:'"default"'},{value:'"error"'},{value:'"success"'},{value:'"waiting"'}]}},message:{defaultValue:null,description:`When controlled={true}, the message that will display on error
Otherwise, the state must be manually set to InputState.ERROR`,name:"message",required:!1,type:{name:"string"}},required:{defaultValue:null,description:`Whether to display the asterisk indicating a required field
Note: This is purely a VISUAL indicator, and does not affect validation`,name:"required",required:!1,type:{name:"boolean"}},controlled:{defaultValue:null,description:`Whether the input's validation (errors and state) are controlled by
react-hook-form (requiring use of FormProvider from
@indy /ui/Form)`,name:"controlled",required:!1,type:{name:"boolean"}}}}}catch{}export{g as P,o as a};
