/**
 * Returns the IDs of all symbols available for reference
 * @returns {array} An array of the IDs of the symbols that are present in the
 * symbol drop
 */
export function getSSRSymbolIDs(symbolsClass: any): array;
/**
 * Returns true/false depending on whether the icon has already been rendered
 * into a symbol drop
 * @param {string} id id of the symbol
 * @param {string} symbolsClass selector for the symbols drop
 * @returns {bool} Whether or not a symbol exists matching the given ID
 */
export function existsAsSymbol(id: string, symbolsClass: string): bool;
/**
 * Called following any updateTakes in an array of the properties to all of the
 * mounted instances of the icon component
 * @param {array} newState an array of the properties to all of the mounted
 * instances of Icons
 * @returns {array} A unique permutation of the array of Icon components as
 * generated by Icons
 */
export function reducePropsToState(newState: array): array;
/**
 * Invoked during CSR with the return value of reducePropsToState, it is used to
 * then emit a side effect
 *
 * @param {array} reducedState A unique permutation of the array of Icon
 * components as generated by Icons
 * @returns {array}
 */
export function handleStateChangeOnClient(reducedState?: array): array;
/**
 * Invoked during SSR, this is equivalent to handleStateChangeOnClient and
 * offers an opportunity to augment the icon stack before it is committed to
 * state
 * @param {array} reducedState A unique permutation of the array of Icon
 * components as generated by Icons
 * @returns {array}
 */
export function mapStateOnServer(reducedState?: array): array;
//# sourceMappingURL=Symbols.helpers.d.ts.map