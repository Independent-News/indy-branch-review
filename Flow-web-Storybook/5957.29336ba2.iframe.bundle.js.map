{"version":3,"file":"5957.29336ba2.iframe.bundle.js","mappings":";AAwBA;AACA;;AAIA;AAEA;AACA;AACA;;AAIA","sources":["webpack://@indy/flow-web/./app/component/library/Article/Luxury/Embeds/Image.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport {\n  FullBleedContainer,\n  InsetLeftContainer,\n  InsetRightContainer,\n} from '@indy/ui/Layout';\nimport { MediaPlusPaddedCaption } from '@indy/ui/MediaPlusCaption';\nimport { maxTablet, maxLaptop, maxDesktop } from '@indy/ui/devices';\n\nimport { buildSrcset } from '#app/util/image';\nimport { minify } from '#app/util/taggedTemplates';\n\nimport { StyledImage } from './Image.styles';\nimport { ALIGN_NONE, ALIGN_CENTRE, ALIGN_LEFT, ALIGN_RIGHT } from './constants';\n\n/**\n * @todo generate widths and sizes based on cols once the grid system is in\n * place\n * @explain The current implementation is a temporary solution whilst we await\n * the grid system. The widths and sizes are read from the rendered containers\n */\nexport const FULL_BLEED_WIDTHS = [360, 768, 1000, 1250];\nexport const FULL_BLEED_SIZES = minify`\n  ${maxLaptop} 100vw,\n  ${maxDesktop} 1000px,\n  1250px\n`;\n\nconst INSET_WIDTHS = [360, 767, 492, 410, 514];\nconst INSET_SIZES = minify`\n  ${maxTablet} 100vw,\n  ${maxLaptop} 492px,\n  ${maxDesktop} 410px,\n  514px,\n`;\n\nconst InsetImage = ({\n  data,\n  heroLocalCaption,\n  heroLocalCopyright,\n  objectFit = null,\n  aspectRatio,\n}) => {\n  const {\n    align = ALIGN_NONE,\n    url,\n    alt,\n    localCaption,\n    localCopyright,\n    extra,\n  } = data || {};\n\n  const width = extra?.imageSize?.width;\n  const height = extra?.imageSize?.height;\n\n  const isInset = align === ALIGN_LEFT || align === ALIGN_RIGHT;\n  const widths = isInset ? INSET_WIDTHS : FULL_BLEED_WIDTHS;\n  const sizes = isInset ? INSET_SIZES : FULL_BLEED_SIZES;\n\n  const srcset = buildSrcset(url, widths, [1, 2]);\n\n  const imageCopyright = heroLocalCopyright || localCopyright;\n\n  const imageCaption = `${heroLocalCaption || localCaption || ''}${\n    imageCopyright ? ` (${imageCopyright})` : ''\n  }`;\n\n  const imagePlusCaption = (\n    <MediaPlusPaddedCaption caption={imageCaption}>\n      <StyledImage\n        src={url}\n        srcSet={srcset}\n        sizes={sizes}\n        alt={alt}\n        $objectFit={objectFit}\n        $aspectRatio={\n          aspectRatio ?? (width && height ? (width / height).toFixed(4) : null)\n        }\n      />\n    </MediaPlusPaddedCaption>\n  );\n\n  if (!url) {\n    return null;\n  }\n\n  switch (align) {\n    case ALIGN_LEFT:\n      return <InsetLeftContainer>{imagePlusCaption}</InsetLeftContainer>;\n    case ALIGN_RIGHT:\n      return <InsetRightContainer>{imagePlusCaption}</InsetRightContainer>;\n    default:\n      return <FullBleedContainer>{imagePlusCaption}</FullBleedContainer>;\n  }\n};\n\nInsetImage.propTypes = {\n  data: PropTypes.shape({\n    url: PropTypes.string.isRequired,\n    alt: PropTypes.string,\n    align: PropTypes.oneOf([ALIGN_NONE, ALIGN_CENTRE, ALIGN_LEFT, ALIGN_RIGHT]),\n  }).isRequired,\n  heroLocalCaption: PropTypes.string,\n  heroLocalCopyright: PropTypes.string,\n  objectFit: PropTypes.string,\n  aspectRatio: PropTypes.number,\n};\n\nexport default InsetImage;\n"],"names":[],"sourceRoot":""}