{"version":3,"file":"8799.e3905871.iframe.bundle.js","mappings":";AA2CA;;;AAkJA","sources":["webpack://@indy/flow-web/./app/component/library/Article/LiveBlog/Native/LiveBlog.tsx"],"sourcesContent":["import dayjs from 'dayjs';\nimport { Fragment, useState } from 'react';\nimport { css, styled } from 'styled-components';\n\nimport * as device from '#app/constants/devices';\nimport { ID_TABOOLA_MID_ARTICLE_THUMBNAILS_LIVEBLOGS } from '#app/constants/taboola';\n\nimport { redirect } from '#app/public/js/utils/redirect';\n\nimport PostAd from './Ad';\nimport KeyPoints from './KeyPoints';\nimport MPU from './MPU';\nimport Pagination from './Pagination';\nimport Post from './Post';\nimport TaboolaAdWrapper from './TaboolaAdWrapper';\nimport UpdateButton from './UpdateButton';\nimport useInterval from './useInterval';\n\nimport type {\n  LiveBlog as LiveBlogProps,\n  Post as LiveBlogPost,\n} from '#types/liveBlog';\n\nconst POLL_INTERVAL_MS = 1000;\nconst AD_INTERVAL_POSTS = 3;\n\nconst Wrapper = styled.div`\n  margin: 20px 0;\n`;\n\nconst formatDateFromTimestamp = (timestamp: number) => {\n  const date = new Date(timestamp * 1000);\n  return dayjs(date).format('DD MMM YYYY HH:mm');\n};\n\ninterface KeyPointsWrapperProps {\n  $isSubscribed: boolean;\n}\n\nconst KeyPointsWrapper = styled.div<KeyPointsWrapperProps>`\n  ${(props) =>\n    props.$isSubscribed &&\n    css`\n      @media ${device.laptop} {\n        display: none;\n      }\n    `}\n`;\n\nconst LiveBlog = ({\n  initialPosts = [],\n  paging = { total: 0, posts: 0 },\n  keyPointsHTML,\n  keyPointsTitle = '',\n  sensitive,\n  adTitleText,\n  customProps,\n  adUnitPathPrefix,\n  currentPage,\n  status,\n  videoPlayerInfo,\n  lang,\n  liveBlogId,\n  isAdFreeUser,\n  isClimate,\n  isSGI,\n}: LiveBlogProps) => {\n  const { isSubscribed } = customProps;\n  const allowAds = !isSubscribed && !sensitive && !isAdFreeUser;\n  const [posts, setPosts] = useState(initialPosts);\n  const [pendingPosts, setPendingPosts] = useState<Array<LiveBlogPost>>([]);\n  const [lastChangedTimestamp, setLastChangedTimestamp] = useState(\n    initialPosts.reduce((acc, post) => Math.max(acc, post.timestamp), 0),\n  );\n\n  useInterval(async () => {\n    const response = await fetch(`/external-api/liveblog/${liveBlogId}`);\n    if (!response.ok) {\n      console.error('Failed to fetch liveblog posts');\n      return;\n    }\n    const data: {\n      posts: Array<LiveBlogPost>;\n    } = await response.json();\n    const newPosts = data.posts\n      .filter(\n        (post) =>\n          !posts.some((p) => p.data.id === post.data.id) &&\n          parseInt(post.data.created) > lastChangedTimestamp,\n      )\n      .map((post) => {\n        const timestamp = parseInt(post.data.created);\n        return {\n          ...post,\n          formattedTimestamp: formatDateFromTimestamp(timestamp),\n          timestamp,\n        };\n      });\n    setLastChangedTimestamp(\n      newPosts.reduce(\n        (acc, post) => Math.max(acc, post.timestamp),\n        lastChangedTimestamp,\n      ),\n    );\n    setPendingPosts([...newPosts, ...pendingPosts]);\n  }, POLL_INTERVAL_MS);\n\n  return (\n    <Wrapper>\n      <KeyPointsWrapper $isSubscribed={isSubscribed}>\n        <KeyPoints\n          title={keyPointsTitle}\n          html={keyPointsHTML}\n          isSubscribed={isSubscribed}\n          isClimate={isClimate}\n          isSGI={isSGI}\n        />\n      </KeyPointsWrapper>\n      {pendingPosts.length > 0 && (\n        <UpdateButton\n          onClick={() => {\n            if (currentPage > 1) {\n              // If we are on a page other than the first one, we need to reset the page to 1\n              const url = new URL(window.location.href);\n              url.searchParams.set('page', '1');\n\n              redirect(url.toString());\n            }\n            setPosts(\n              [...pendingPosts, ...posts].sort((a, b) =>\n                status === 1\n                  ? b.timestamp - a.timestamp\n                  : a.timestamp - b.timestamp,\n              ),\n            );\n            setPendingPosts([]);\n          }}\n        />\n      )}\n      {posts.map(({ data, postJson, timestamp, formattedTimestamp }, index) => {\n        const postNumber = index + 1;\n        const isTaboola = postNumber === AD_INTERVAL_POSTS * 3;\n        const isTaboolaMidArticleThumbs = postNumber === 1;\n        const postHasAd =\n          isTaboolaMidArticleThumbs || postNumber % AD_INTERVAL_POSTS === 0;\n        const showAd = allowAds && postHasAd;\n        const taboolID = isTaboolaMidArticleThumbs\n          ? ID_TABOOLA_MID_ARTICLE_THUMBNAILS_LIVEBLOGS\n          : null;\n\n        return (\n          <Fragment key={data.uuid}>\n            <Post\n              data={data}\n              contentItems={postJson}\n              customProps={customProps}\n              timestamp={timestamp}\n              formattedTimestamp={formattedTimestamp}\n              videoPlayerInfo={videoPlayerInfo}\n              lang={lang}\n            />\n            {showAd && (\n              <PostAd\n                className={!isTaboola ? 'mobile-only' : ''}\n                {...{ data, adTitleText }}\n              >\n                <TaboolaAdWrapper\n                  id={taboolID}\n                  withTaboola={isTaboola || isTaboolaMidArticleThumbs}\n                >\n                  <MPU\n                    adUnitPathPrefix={adUnitPathPrefix}\n                    name={`blog_mpu_${Math.round(\n                      postNumber / AD_INTERVAL_POSTS,\n                    )}`}\n                  />\n                </TaboolaAdWrapper>\n              </PostAd>\n            )}\n          </Fragment>\n        );\n      })}\n      {paging.total > paging.posts && (\n        <Pagination paging={paging} currentPage={currentPage} status={status} />\n      )}\n    </Wrapper>\n  );\n};\n\nexport default LiveBlog;\n"],"names":[],"sourceRoot":""}